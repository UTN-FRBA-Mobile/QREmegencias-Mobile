/*
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.qre.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * PathologyDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-10T21:22:21.097-03:00")
public class PathologyDTO implements Parcelable {
  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    /*
    ANATOMICAL("ANATOMICAL"),

    CLINICAL("CLINICAL"),

    MOLECULAR("MOLECULAR"),

    ORAL("ORAL");
    */
    insuficiencia_suprarrenal("insuficiencia_suprarrenal"),
    asma("asma"),
    hipertension("hipertension"),
    antecedentes_oncologicos("antecedentes_oncologicos"),
    otro("otro"),
    ;

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public PathologyDTO date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/

  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public PathologyDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PathologyDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/

  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathologyDTO pathologyDTO = (PathologyDTO) o;
    return Objects.equals(this.date, pathologyDTO.date) &&
        Objects.equals(this.description, pathologyDTO.description) &&
        Objects.equals(this.type, pathologyDTO.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, description, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathologyDTO {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(date);

    out.writeValue(description);

    out.writeValue(type);
  }

  public PathologyDTO() {
    super();
  }

  PathologyDTO(Parcel in) {
    
    date = (OffsetDateTime)in.readValue(OffsetDateTime.class.getClassLoader());
    description = (String)in.readValue(null);
    type = (TypeEnum)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Creator<PathologyDTO> CREATOR = new Creator<PathologyDTO>() {
    public PathologyDTO createFromParcel(Parcel in) {
      return new PathologyDTO(in);
    }
    public PathologyDTO[] newArray(int size) {
      return new PathologyDTO[size];
    }
  };
}

