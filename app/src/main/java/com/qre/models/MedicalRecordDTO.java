/*
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.qre.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.qre.models.FileDTO;
import com.qre.models.MedicalRecordChangeDTO;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import android.os.Parcelable;
import android.os.Parcel;

import org.threeten.bp.LocalDate;

/**
 * MedicalRecordDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-10T21:22:21.097-03:00")
public class MedicalRecordDTO implements Parcelable {
  @SerializedName("changes")
  private List<MedicalRecordChangeDTO> changes = null;

  @SerializedName("files")
  private List<FileDTO> files = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("performed")
  private LocalDate performed = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("user")
  private String user = null;

  public MedicalRecordDTO changes(List<MedicalRecordChangeDTO> changes) {
    this.changes = changes;
    return this;
  }

  public MedicalRecordDTO addChangesItem(MedicalRecordChangeDTO changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<MedicalRecordChangeDTO>();
    }
    this.changes.add(changesItem);
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/

  public List<MedicalRecordChangeDTO> getChanges() {
    return changes;
  }

  public void setChanges(List<MedicalRecordChangeDTO> changes) {
    this.changes = changes;
  }

  public MedicalRecordDTO files(List<FileDTO> files) {
    this.files = files;
    return this;
  }

  public MedicalRecordDTO addFilesItem(FileDTO filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<FileDTO>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/

  public List<FileDTO> getFiles() {
    return files;
  }

  public void setFiles(List<FileDTO> files) {
    this.files = files;
  }

  public MedicalRecordDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MedicalRecordDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MedicalRecordDTO performed(LocalDate performed) {
    this.performed = performed;
    return this;
  }

   /**
   * Get performed
   * @return performed
  **/

  public LocalDate getPerformed() {
    return performed;
  }

  public void setPerformed(LocalDate performed) {
    this.performed = performed;
  }

  public MedicalRecordDTO text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/

  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public MedicalRecordDTO user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/

  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MedicalRecordDTO medicalRecordDTO = (MedicalRecordDTO) o;
    return Objects.equals(this.changes, medicalRecordDTO.changes) &&
        Objects.equals(this.files, medicalRecordDTO.files) &&
        Objects.equals(this.id, medicalRecordDTO.id) &&
        Objects.equals(this.name, medicalRecordDTO.name) &&
        Objects.equals(this.performed, medicalRecordDTO.performed) &&
        Objects.equals(this.text, medicalRecordDTO.text) &&
        Objects.equals(this.user, medicalRecordDTO.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changes, files, id, name, performed, text, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MedicalRecordDTO {\n");
    
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    performed: ").append(toIndentedString(performed)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(changes);

    out.writeValue(files);

    out.writeValue(id);

    out.writeValue(name);

    out.writeValue(performed);

    out.writeValue(text);

    out.writeValue(user);
  }

  public MedicalRecordDTO() {
    super();
  }

  MedicalRecordDTO(Parcel in) {
    
    changes = (List<MedicalRecordChangeDTO>)in.readValue(MedicalRecordChangeDTO.class.getClassLoader());
    files = (List<FileDTO>)in.readValue(FileDTO.class.getClassLoader());
    id = (String)in.readValue(null);
    name = (String)in.readValue(null);
    performed = (LocalDate)in.readValue(LocalDate.class.getClassLoader());
    text = (String)in.readValue(null);
    user = (String)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Creator<MedicalRecordDTO> CREATOR = new Creator<MedicalRecordDTO>() {
    public MedicalRecordDTO createFromParcel(Parcel in) {
      return new MedicalRecordDTO(in);
    }
    public MedicalRecordDTO[] newArray(int size) {
      return new MedicalRecordDTO[size];
    }
  };
}

