/*
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.qre.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * MedicationDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-10T21:22:21.097-03:00")
public class MedicationDTO implements Parcelable {
  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets period
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
  public enum PeriodEnum {
    /*
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    */

    diariamente("diariamente"),
    semanalmente("semanalmente"),
    mensualmente("mensualmente"),

    ;

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String text) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PeriodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("period")
  private PeriodEnum period = null;

  public MedicationDTO amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/

  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public MedicationDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public MedicationDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MedicationDTO period(PeriodEnum period) {
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/

  public PeriodEnum getPeriod() {
    return period;
  }

  public void setPeriod(PeriodEnum period) {
    this.period = period;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MedicationDTO medicationDTO = (MedicationDTO) o;
    return Objects.equals(this.amount, medicationDTO.amount) &&
        Objects.equals(this.description, medicationDTO.description) &&
        Objects.equals(this.name, medicationDTO.name) &&
        Objects.equals(this.period, medicationDTO.period);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, description, name, period);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MedicationDTO {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(amount);

    out.writeValue(description);

    out.writeValue(name);

    out.writeValue(period);
  }

  public MedicationDTO() {
    super();
  }

  MedicationDTO(Parcel in) {
    
    amount = (Integer)in.readValue(null);
    description = (String)in.readValue(null);
    name = (String)in.readValue(null);
    period = (PeriodEnum)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Creator<MedicationDTO> CREATOR = new Creator<MedicationDTO>() {
    public MedicationDTO createFromParcel(Parcel in) {
      return new MedicationDTO(in);
    }
    public MedicationDTO[] newArray(int size) {
      return new MedicationDTO[size];
    }
  };
}

