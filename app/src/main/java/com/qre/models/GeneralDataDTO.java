/*
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.qre.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * GeneralDataDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-10T21:22:21.097-03:00")
public class GeneralDataDTO implements Parcelable {
  @SerializedName("allergic")
  private Boolean allergic = null;

  @SerializedName("allergies")
  private List<String> allergies = null;

  @SerializedName("bloodType")
  private String bloodType = null;

  @SerializedName("organDonor")
  private Boolean organDonor = null;

  public GeneralDataDTO allergic(Boolean allergic) {
    this.allergic = allergic;
    return this;
  }

   /**
   * Get allergic
   * @return allergic
  **/

  public Boolean getAllergic() {
    return allergic;
  }

  public void setAllergic(Boolean allergic) {
    this.allergic = allergic;
  }

  public GeneralDataDTO allergies(List<String> allergies) {
    this.allergies = allergies;
    return this;
  }

  public GeneralDataDTO addAllergiesItem(String allergiesItem) {
    if (this.allergies == null) {
      this.allergies = new ArrayList<String>();
    }
    this.allergies.add(allergiesItem);
    return this;
  }

   /**
   * Get allergies
   * @return allergies
  **/

  public List<String> getAllergies() {
    return allergies;
  }

  public void setAllergies(List<String> allergies) {
    this.allergies = allergies;
  }

  public GeneralDataDTO bloodType(String bloodType) {
    this.bloodType = bloodType;
    return this;
  }

   /**
   * Get bloodType
   * @return bloodType
  **/

  public String getBloodType() {
    return bloodType;
  }

  public void setBloodType(String bloodType) {
    this.bloodType = bloodType;
  }

  public GeneralDataDTO organDonor(Boolean organDonor) {
    this.organDonor = organDonor;
    return this;
  }

   /**
   * Get organDonor
   * @return organDonor
  **/

  public Boolean getOrganDonor() {
    return organDonor;
  }

  public void setOrganDonor(Boolean organDonor) {
    this.organDonor = organDonor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralDataDTO generalDataDTO = (GeneralDataDTO) o;
    return Objects.equals(this.allergic, generalDataDTO.allergic) &&
        Objects.equals(this.allergies, generalDataDTO.allergies) &&
        Objects.equals(this.bloodType, generalDataDTO.bloodType) &&
        Objects.equals(this.organDonor, generalDataDTO.organDonor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allergic, allergies, bloodType, organDonor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralDataDTO {\n");
    
    sb.append("    allergic: ").append(toIndentedString(allergic)).append("\n");
    sb.append("    allergies: ").append(toIndentedString(allergies)).append("\n");
    sb.append("    bloodType: ").append(toIndentedString(bloodType)).append("\n");
    sb.append("    organDonor: ").append(toIndentedString(organDonor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(allergic);

    out.writeValue(allergies);

    out.writeValue(bloodType);

    out.writeValue(organDonor);
  }

  public GeneralDataDTO() {
    super();
  }

  GeneralDataDTO(Parcel in) {
    
    allergic = (Boolean)in.readValue(null);
    allergies = (List<String>)in.readValue(null);
    bloodType = (String)in.readValue(null);
    organDonor = (Boolean)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Creator<GeneralDataDTO> CREATOR = new Creator<GeneralDataDTO>() {
    public GeneralDataDTO createFromParcel(Parcel in) {
      return new GeneralDataDTO(in);
    }
    public GeneralDataDTO[] newArray(int size) {
      return new GeneralDataDTO[size];
    }
  };
}

