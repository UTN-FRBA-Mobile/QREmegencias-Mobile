/*
 * QR Emergencias WS
 * API Rest QR Emergencias
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.qre.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.qre.models.GeneralDataDTO;
import com.qre.models.HospitalizationDTO;
import com.qre.models.MedicationDTO;
import com.qre.models.PathologyDTO;


import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * EmergencyDataDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-10T21:22:21.097-03:00")
public class EmergencyDataDTO implements Parcelable {
  @SerializedName("general")
  private GeneralDataDTO general = null;

  @SerializedName("hospitalizations")
  private List<HospitalizationDTO> hospitalizations = null;

  @SerializedName("lastMedicalCheck")
  private OffsetDateTime lastMedicalCheck = null;

  @SerializedName("medications")
  private List<MedicationDTO> medications = null;

  @SerializedName("pathologies")
  private List<PathologyDTO> pathologies = null;

  @SerializedName("surgeries")
  private List<HospitalizationDTO> surgeries = null;

  public EmergencyDataDTO general(GeneralDataDTO general) {
    this.general = general;
    return this;
  }

   /**
   * Get general
   * @return general
  **/

  public GeneralDataDTO getGeneral() {
    return general;
  }

  public void setGeneral(GeneralDataDTO general) {
    this.general = general;
  }

  public EmergencyDataDTO hospitalizations(List<HospitalizationDTO> hospitalizations) {
    this.hospitalizations = hospitalizations;
    return this;
  }

  public EmergencyDataDTO addHospitalizationsItem(HospitalizationDTO hospitalizationsItem) {
    if (this.hospitalizations == null) {
      this.hospitalizations = new ArrayList<HospitalizationDTO>();
    }
    this.hospitalizations.add(hospitalizationsItem);
    return this;
  }

   /**
   * Get hospitalizations
   * @return hospitalizations
  **/

  public List<HospitalizationDTO> getHospitalizations() {
    return hospitalizations;
  }

  public void setHospitalizations(List<HospitalizationDTO> hospitalizations) {
    this.hospitalizations = hospitalizations;
  }

  public EmergencyDataDTO lastMedicalCheck(OffsetDateTime lastMedicalCheck) {
    this.lastMedicalCheck = lastMedicalCheck;
    return this;
  }

   /**
   * Get lastMedicalCheck
   * @return lastMedicalCheck
  **/

  public OffsetDateTime getLastMedicalCheck() {
    return lastMedicalCheck;
  }

  public void setLastMedicalCheck(OffsetDateTime lastMedicalCheck) {
    this.lastMedicalCheck = lastMedicalCheck;
  }

  public EmergencyDataDTO medications(List<MedicationDTO> medications) {
    this.medications = medications;
    return this;
  }

  public EmergencyDataDTO addMedicationsItem(MedicationDTO medicationsItem) {
    if (this.medications == null) {
      this.medications = new ArrayList<MedicationDTO>();
    }
    this.medications.add(medicationsItem);
    return this;
  }

   /**
   * Get medications
   * @return medications
  **/

  public List<MedicationDTO> getMedications() {
    return medications;
  }

  public void setMedications(List<MedicationDTO> medications) {
    this.medications = medications;
  }

  public EmergencyDataDTO pathologies(List<PathologyDTO> pathologies) {
    this.pathologies = pathologies;
    return this;
  }

  public EmergencyDataDTO addPathologiesItem(PathologyDTO pathologiesItem) {
    if (this.pathologies == null) {
      this.pathologies = new ArrayList<PathologyDTO>();
    }
    this.pathologies.add(pathologiesItem);
    return this;
  }

   /**
   * Get pathologies
   * @return pathologies
  **/

  public List<PathologyDTO> getPathologies() {
    return pathologies;
  }

  public void setPathologies(List<PathologyDTO> pathologies) {
    this.pathologies = pathologies;
  }

  public EmergencyDataDTO surgeries(List<HospitalizationDTO> surgeries) {
    this.surgeries = surgeries;
    return this;
  }

  public EmergencyDataDTO addSurgeriesItem(HospitalizationDTO surgeriesItem) {
    if (this.surgeries == null) {
      this.surgeries = new ArrayList<HospitalizationDTO>();
    }
    this.surgeries.add(surgeriesItem);
    return this;
  }

   /**
   * Get surgeries
   * @return surgeries
  **/

  public List<HospitalizationDTO> getSurgeries() {
    return surgeries;
  }

  public void setSurgeries(List<HospitalizationDTO> surgeries) {
    this.surgeries = surgeries;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmergencyDataDTO emergencyDataDTO = (EmergencyDataDTO) o;
    return Objects.equals(this.general, emergencyDataDTO.general) &&
        Objects.equals(this.hospitalizations, emergencyDataDTO.hospitalizations) &&
        Objects.equals(this.lastMedicalCheck, emergencyDataDTO.lastMedicalCheck) &&
        Objects.equals(this.medications, emergencyDataDTO.medications) &&
        Objects.equals(this.pathologies, emergencyDataDTO.pathologies) &&
        Objects.equals(this.surgeries, emergencyDataDTO.surgeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(general, hospitalizations, lastMedicalCheck, medications, pathologies, surgeries);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmergencyDataDTO {\n");
    
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    hospitalizations: ").append(toIndentedString(hospitalizations)).append("\n");
    sb.append("    lastMedicalCheck: ").append(toIndentedString(lastMedicalCheck)).append("\n");
    sb.append("    medications: ").append(toIndentedString(medications)).append("\n");
    sb.append("    pathologies: ").append(toIndentedString(pathologies)).append("\n");
    sb.append("    surgeries: ").append(toIndentedString(surgeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(general);

    out.writeValue(hospitalizations);

    out.writeValue(lastMedicalCheck);

    out.writeValue(medications);

    out.writeValue(pathologies);

    out.writeValue(surgeries);
  }

  public EmergencyDataDTO() {
    super();
  }

  EmergencyDataDTO(Parcel in) {
    
    general = (GeneralDataDTO)in.readValue(GeneralDataDTO.class.getClassLoader());
    hospitalizations = (List<HospitalizationDTO>)in.readValue(HospitalizationDTO.class.getClassLoader());
    lastMedicalCheck = (OffsetDateTime)in.readValue(OffsetDateTime.class.getClassLoader());
    medications = (List<MedicationDTO>)in.readValue(MedicationDTO.class.getClassLoader());
    pathologies = (List<PathologyDTO>)in.readValue(PathologyDTO.class.getClassLoader());
    surgeries = (List<HospitalizationDTO>)in.readValue(HospitalizationDTO.class.getClassLoader());
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Creator<EmergencyDataDTO> CREATOR = new Creator<EmergencyDataDTO>() {
    public EmergencyDataDTO createFromParcel(Parcel in) {
      return new EmergencyDataDTO(in);
    }
    public EmergencyDataDTO[] newArray(int size) {
      return new EmergencyDataDTO[size];
    }
  };
}

